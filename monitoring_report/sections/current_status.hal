section "Project status"
label :components

subsection "Engine"

typewrite "MMPG", "C++"

p "The MMPG **engine** is a library that implements basic features needed by any MMPG. The **engine** exposes a set
of classes that can be used and extended to build the logic of the game.

Its source code is available here: #url{https://github.com/mmpg/engine}"

subsubsection "Architecture"

p "The runtime of an MMPG **engine** consists of 3 types of processes:"

description:
  item "Master process"; p "It represents the **game-world server**. The master process listens to requests coming from
players and updates the game world accordingly. There is only **one master process per runtime**."

  item "Worker process"; p "It represents a **pool of players**. A worker process **executes** a set of players and
  **manages** them. There can be **multiple workers per runtime**."

  item "Player process"; p "It represents a **player program**. A player process **reads** the game world from the
  **master process** and **performs requests** to **change** the game world."

p "Processes comunicate with each other using **low-latency sockets**. Thus, different workers can be executed
in different machines to achieve better performance.

#autoref{engine_arch} shows the hierarchy of an engine runtime with $N$ workers and $M = #sum_{i=0}^{N} M_i$ players."

figure!:
  resizebox "\\textwidth":
    input "graphs/engine_arch"
  caption "Hierarchy of engine processes"
  label "engine_arch"

subsubsection "Current features"

description:
  item "AI hot-swapping"; p "Players can change their programs during a match."
  item "Log system"; p "Every event that occurs in the engine is logged properly. This allows players to replay and
  watch the past of a match."
  item "Event notification"; p "Events are notified to subscribers through a |PUB/SUB| socket connection."
  item "Decoupled architecture"; p "The current architecture makes scaling easy. Each worker can be executed in a
  different machine."
  item "API"; p "The engine listens to requests made through a |REQ/REP| socket connection. Other applications can
  easily connect to the engine and interact with it."
  item "Game abstraction"; p "A set of abstract classes defines the behaviour that any MMPG needs to implement.
  Mostly, this behaviour includes the **AI public interface**, **game actions**, and **world generation and
  serialization**."

subsubsection "Pending features"

description:
  item "Security"; p "Programs need to be executed in an isolated environment."
  item "Configuration"; p "Ports used in socket connections and worker addresses should be configurable."

subsubsection "Implementation details"

paragraph "Programming language"
indent; p "The **engine** needs to be **fast**, as the game logic will be built on top of it, and it also needs to access
**low-level** operative system operations, so it can limit how player programs are executed. Hence, **C++** is the
programming language chosen to implement it, mainly because its **efficiency** and the **|C POSIX API|**, which allows
to talk directly to **|UNIX|-based operative systems**."

paragraph "Inter-process communication"
indent; p "As it was explained previously, the **engine** features a decoupled architecture. Different processes are
executed and communicate with each other using **sockets**. However, implementing inter-process communication from
scratch would be a real challenge by itself, and it is not the subject of this project. This is where **|ZeroMQ|** comes
in.

**|ZeroMQ|** #cite{zeromq} is an embeddable networking library that implements **low-latency socket communication**. It manages
**low-level** communication, while providing a flexible and easy-to-use interface. **|ZeroMQ|** has bindings available
for the most well-known programming languages.

The **engine** uses **|ZeroMQ|** for all the inter-process communication. As a consequence, the architecture becomes
decoupled. For instance, a **player process** could be programmed in **any programming language**, as it
only performs requests to the master process. Thus, it would be **relatively easy** to allow players to develop
**AI**s using **different programming languages**."

paragraph "Game logic abstraction"
indent; p "The **engine** exposes a set of **abstract classes** to build game logic on top of it:"

description:
  item "|AI|"; p "Defines the interface that any MMPG AI needs to implement: a |play| method. Games can extend
  this class to define **|AI API|s** that players can use to write their programs."
  item "|World|"; p "Represents a game world. Games need to extend this class and implement methods to
  **generate**, **serialize** and **update** the world."
  item "|Action|"; p "Represents an action that an **AI** can perform. Normally, these actions try to **update**
  the game world."

p "On the other hand, the **engine** also provides two **fully-implemented classes** to run **master and player
processes**. As #autoref{world_injection} shows, a game world needs to be injected to run these processes.

The **worker** executable is **independent of the game logic** and it can be built **directly from the library**."

figure!:
  inputminted "c++", "code/master.cpp", options => "linenos,fontsize=\\small,frame=lines,framesep=2mm"
  caption "Injecting a game world to the master process"
  label :world_injection


subsection "API"
p "The **|API|** component exposes **|HTTP|** endpoints that allow to interact with an underlying **engine**. It
usually handles requests from the game viewer.

The **|API|** component is developed using the **|Go|** programming language #cite{golang}. **Go**
is **simple**, **fast**, **easy-to-deploy** and includes **native** libraries to build |REST API|s.

This component was originally called **real-time notifier**, but actually it does more than notifying. For this reason,
the name was changed.

It source code is available here: #url{https://github.com/mmpg/api}"

subsubsection "Current endpoints"

tabularx "\\textwidth", "l | l | X":
  head "URI", "Method", "Description"
  row "\\texttt{/auth}", "\\texttt{GET}", "Validates an authentication token and returns a new one."
  row "\\texttt{/auth}", "\\texttt{POST}", "Validates the given user credentials and returns an authentication token."
  row "\\texttt{/log}", "\\texttt{GET}", "Returns the log file of the given \\textbf{time}."
  row "\\texttt{/events}", "\\texttt{GET}", "Upgrades the HTTP request to a WebSocket subscription of engine events."
  row "\\texttt{/player}", "\\texttt{POST}", "Deploys the uploaded file as the player of the authenticated user."

subsubsection "Pending endpoints"

tabularx "\\textwidth", "l | l | X":
  head "URI", "Method", "Description"
  row "\\texttt{/world}", "\\texttt{GET}", "Returns the current state of the world."

br 0.2
indent; p "This endpoint might be useful to reduce the amount of information in the events, as the **static** part of
the game world would not need to be included anymore."

subsection "Client"

p "The **client** component is a **JavaScript** library that implements a set of useful classes to communicate with
an **MMPG |API|** and implement **game viewers**.

This component had a different name originally. It was called **notifier subscriber**. But given that the **real-time
notifier** evolved into an **API**, it made sense to rename this component to **client**.

Its source code is available here: #url{https://github.com/mmpg/client}"

subsubsection "Current classes"

description:
  item "|Client|"; p "Allows to perform requests to any **MMPG |API|**. Most of its methods perform an |HTTP| request
  and return a JavaScript **promise**."
  item "|EventStream|"; p "Represents a stream of game events. It delegates the event handling to its **subscriber**."
  item "|LiveSubscriber|"; p "**Buffers** 2 seconds of events and then starts **consuming them**."
  item "|PlaybackSubscriber|"; p "Reads a **log** of events from the |API| and consumes them. When the number of
  events reaches a minimum, it requests the next log to the |API|."
  item "|Webtoken|"; p "Represents a **|JSON| Webtoken** #cite{jwt}. It is used to manage authentication tokens."
  item "|GameLoop|"; p "Implements a **consistent game loop**, calling a callback function and passing the time
  between calls as the first argument."

subsection "Space Wars"

p "**Space Wars** will be the first game using the MMPG platform. It is inspired by **Galcon** #cite{galcon}
and **Planet Wars** #cite{planet_wars}."

subsubsection "Logic"

indent; p "The game logic has currently **one feature**:"

description:
  item "Pseudo-randomly generated planetary systems"; p "The game world is randomly generated. The current algorithm
  chooses the **size of the sun**, **number of planets**, and the **size**, **orbit** and **position** of every planet.
  Finally, it generates a **connected graph of planets**, where an edge represents a path between the two nodes."

p "However, these are the features that are expected to be available **before the year ends**:"

description:
  item "Space ships"; p "Planets can be **conquered** by space ships. Conquered planets **generate** space ships."
  item "Multiple systems"; p "The game will take place in multiple planetary systems connected by **mass relays**."
  item "Mass relays"; p "Nodes that allow ships to **travel between planetary systems**."
  item "Score system"; p "Players with more conquered planets will obtain higher scores."

clearpage

subsubsection "Viewer"

p "Currently, the **Space Wars viewer** supports these features:"

description:
  item "Planetary system rendering"; p "The game world generated by the game logic is rendered using **|WebGL|**,
  as shown in #autoref{planets}."
  item "Login"; p "Players can be authenticated using a login form. The session is saved in the browser's
  **local storage**.
  See #autoref{login_form}."
  item "Player deployment"; p "Authenticated players can **deploy a new version of their program** and receive feedback
  in **real-time** of the deployment process. See #autoref{deploy_error}."
  item "Game time control"; p "There is a widget that allows viewers to watch the **previous events of the
  current match**. See #autoref{game_time}."

indent; p "By the end of the project, the viewer is **expected to support**:"

description:
  item "Camera movement"; p "The camera will **move** using the |W|, |A|, |S|, |D| keys."
  item "Game rendering"; p "Space ships, mass relays and solar systems will be rendered properly to **reflect the
  state of the game world**."
  item "Control panel"; p "Administrators will have access to a panel to **control the current match** and, possibly,
  **monitor the players' status**."

figure!:
  resizebox width => "\\textwidth":
    includegraphics "images/planets.png"

  caption "Planetary system"
  label :planets

figure!:
  centered:
    resizebox height => "250pt":
      includegraphics "images/login_ok.png"

    resizebox height => "250pt":
      includegraphics "images/login_error.png"

  caption "Login form. Valid (left). Invalid (right)"
  label :login_form

figure!:
  centered:
    minipage ".5\\textwidth":
      figure!:
        centered:
          resizebox height => "250pt":
            includegraphics "images/deploy_error.png"
        caption "Player deployment with a compiling error"
        label :deploy_error

    minipage ".5\\textwidth":
      figure!:
        centered:
          resizebox height => "100pt":
            includegraphics "images/game_time.png"

        caption "Game time"
        label :game_time
