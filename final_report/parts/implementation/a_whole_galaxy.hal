chapter "A whole galaxy"
label :whole_galaxy

p "At this point, the integration server was running a game similar to Galcon: a small number of players could
compete to win control over the generated planetary system. However, it was necessary to increase the game size
in order to add support for a high amount of players."

section "Generating multiple planetary systems"
p "At this moment, the game world was a planetary system. Therefore, the logical step to increase the game size
was to think about a **galaxy**.

The game size was increased by generating a number of planetary systems proportional to the amount
of players of the match. Different systems were connected using an algorithm similar to the one used to
connect planets (described in #autoref{fleet_planets}). A new type of celestial body was added to each system that
allowed ships to travel to its connected systems: the **relay**.

In order to simplify the galaxy generation, it was decided that the system position would not affect travel time between
systems. Specifically, travelling from one relay to another was instantaneous. This way, a galaxy could be simplified
to an ordered set of systems, with no need to positionate the systems correctly inside the game logic."

section "Separating world structure from dynamic data"
p "Once the new world generation was ready, a new prototype was deployed to the integration server. This prototype
generated **300 systems** as a game world.

After deploying the prototype, the CPU usage in the server increased from 1-2\\% to **20\\%**. While an increase
in the CPU usage was expected, it was not expected to be that much. Hence, an analysis was performed to detect
any possible bottlenecks:"

p "The main symptom was that the API was notifying 200 kbits of events per second, when before deploying the bandwidth
needed was 10-12 kbps. The events that changed after the deployment were the **snapshots** (see #autoref{log_system}).
The game world increased its size by 300 times, thus the snapshots were approximately 300 times bigger. These snapshots
are also sent to players quite often to keep their copies of game worlds updated.

Given that the snapshot generation turned expensive, an optimization was needed. Most of the generated game world was static,
it did not change: a system stayed with the same structure the entire match. The only data that could potentially change
was the number of ships and the owner of every planet. Thus, there was no reason to constantly generate snapshots where most of
its data was static. Instead, **static data and dynamic data could be separated**.

Therefore, the optimization consisted in generating a world structure snapshot only once, and notify it to players and
viewers only once. Then, snapshots containing dynamic data were generated and notified periodically, as before.

The optimization reduced the CPU usage from 20\\% to **2\\%** consistently and the bandwidth from 200kbps to **20kbps**.
#autoref{cpu_galaxy} shows the CPU usage drop after the optimization was deployed."

figure!:
  resizebox width => "\\textwidth":
    includegraphics "images/cpu_galaxy.png"

  caption "CPU usage drop after the separating world structure from dynamic data"
  label :cpu_galaxy

section "Rendering a galaxy"
p "[...]"

section "Summary"
p "[...]"
