chapter "Deployment of AI"

p "The next most basic feature that the platform needed to support was the **hot-swapping of AI**s. Players needed to be
able to change their **AI**s during a match.

However, it was also necessary to provide some security, so players could not change the **AI**s of other players. Hence,
a method to **authenticate players** was needed.

This chapter details the implementation of the authentication system and the deployment system."

section "Recognizing players"
p "The first step consisted in making the **engine** acknowledge the different players by some identifier. When the **engine**
was booted up, it read a file containing a list of **user identifiers**. Then, each one of these identifiers was internally
linked with a match player.

Afterwards, a new type of request handler was added to the **app-server** developed in the previous chapter: **|PLAYER\\_EXISTS|**.
This request consisted of the |PLAYER\\_EXISTS| keyword followed by a space, and then a user identifier. For example:"

verbatim:
  p "PLAYER_EXISTS hector.ramon@est.fib.upc.edu"

p "In this example, the user identifier is an e-mail. But it is important to note that the engine was not limited to e-mails,
it was able to work with **any type of string**.

When the **engine** received a **|PLAYER\\_EXISTS|** request, it checked if the given identifier was linked to some player in
the current match and replied **|YES|** or **|NO|** accordingly."

section "Authenticating players"
p "The authentication system was implemented in the **API** component. Mainly because authentication solved an environment
limitation of the component that exposed the **engine**: the **API**. Hence, the **engine** did not need to know how to authenticate
users, the **API** did.

A new endpoint **|/auth|** was created in the **API**. This endpoint accepted two types of requests:"

description:
  item "POST"; p "It **validated player credentials**:"
  enumerate:
    item; p "Accepted an **identifier** and a **password**."
    item; p "Checked whether the **identifier** and the **password** were valid using a **credentials validator**."
    item; p "Returned a |403 Forbidden| error if the credentials were not valid."
    item; p "Checked if the player existed in the **engine** using the **|PLAYER\\_EXISTS|** request."
    item; p "Returned a |403 Forbidden| error if the player did not exist."
    item; p "Returned a **digitally-signed authentication token** for the given **identifier**."

  item "GET"; p "It **renewed authentication token**s"
  enumerate:
    item; p "Accepted an **authentication token**."
    item; p "Checked if the **authentication token** was valid."
    item; p "Returned a |400 Bad Request| error if the **authentication token** was not valid."
    item; p "Returned a new **authentication token**."

p "The **authentication tokens** were implemented using **|JSON WebTokens|** #cite{jwt}. This tokens have an expÃ¬ration date,
hence the necessity to **renew** them.

A **credentials validator** is a simple |Go| function that tells whether the given **identifier** and
**password** are valid or not. A **credential validator** can be injected in the **API** easily. Hence, anyone can
implement its own **credentials validator** and customize the authentication system.

Finally, a **credentials validator** for the **Jutge.org** platform was developed using an endpoint provided by the project
director. Thus, to authenticate properly it was necessary to provide a valid **e-mail** and **password** of **Jutge.org**."

section "Logging in players from the viewer"
p "Once the **authentication system** was implemented, the **client** library was updated to add support to the new **|/auth|**
endpoint. Also, a **login form** was designed in the **viewer** to allow players to **login**. #autoref{login_form}
shows how this **login form** looks."

figure!:
  centered:
    resizebox height => "250pt":
      includegraphics "images/login_ok.png"

    resizebox height => "250pt":
      includegraphics "images/login_error.png"

  caption "Login form. Valid (left). Invalid (right)"
  label :login_form

p "When a **login succeeded** the returned **authentication token** was saved in the **local storage** of the browser and renewed
when the **viewer** was reaccessed, or every **30 minutes** if it was kept open."

section "Deploying new AIs"
p "Once, players were able to login, the deployment of new **AI**s could be implemented.

Firstly, a new request handler in the **app-server** was needed: **|DEPLOY\\_PLAYER|**. This type of request had two
parameters: the **player identifier** and the **code of the new AI encoded in base64**. After receiving a **|DEPLOY\\_PLAYER|**
request, the **engine** tried to **compile** the **code**, assigned the new executable to the player with the given **identifier**,
and **restarted** its **player process**. In case the compilation failed, then the compilation error was returned.

Secondly, a new **API** endpoint **|/player|** was implemented to expose the new **engine** functionality and
allow **authenticated players** to change their **AI**s. This endpoint was pretty simple:"

enumerate:
  item; p "Accepted an **authentication token** and an **uploaded file**."
  item; p "Checked whether the **authentication token** was valid or not."
  item; p "Returned a **|401 Unauthorized|** error if the **authentication token** was invalid."
  item; p "Encoded the **uploaded file** in **base64**."
  item; p "Issued a |DEPLOY\\_PLAYER| request to the engine using the **identifier** in the **authentication token** and the
  **encoded file** as parameters."
  item; p "Returned a descriptive error if the deploymet failed."
  item; p "Returned a **|200 OK|** response."

p "As it is been shown multiple times now. There is an **API** endpoint for almost every request that the **engine app-server**
can handle. Hence, the **API** exposes the **engine** with a layer of **control** on top of it.

Finally, the **client** was updated to support the new endpoint and a **deployment form** was created in the **viewer**.
This form was designed having in mind that **the deployment process should be fun**, so players feel encouraged to
**improve its code**. #autoref{deploy_error} shows how the **deployment form** looks."

figure!:
  centered:
    resizebox height => "210pt":
      includegraphics "images/deploy_error.png"

  caption "Player deployment with a compilation error"
  label :deploy_error

section "Summary"
p "Summarizing, this capter detailed the implementation of:"

enumerate:
  item; p "An **authentication system**, which consisted in:"
  enumerate:
    item; p "Implementing the **|PLAYER\\_EXISTS|** handler in the **engine app-server**."
    item; p "Adding the **|/auth|** endpoint to the **API**."
    item; p "Creating of the **login form** in the viewer."

  item; p "The **AI hot-swapping** feature, which consisted in:"
  enumerate:
    item; p "Implementing the **|DEPLOY\\_PLAYER|** handler in the **engine app-server**."
    item; p "Adding the **|/player|** endpoint to the **API**."
    item; p "Creating of the **deployment form** in the viewer."
